{"hash":"1ec312940c49be70375c29e1c6d700e9b7a536fa","data":{"posts":{"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"1420bdac118b62f8150762f818ef131b","title":"TIL✨ PIN번호 입력 폼 만들기","date":"5. July 2021","timeToRead":7,"path":"/post/210705-til/","category":{"id":"TIL","title":"TIL","path":"/category/til/"},"tags":[{"id":"TIL","title":"TIL","path":"/tag/TIL/"},{"id":"Vue","title":"Vue","path":"/tag/Vue/"}],"excerpt":"<h2>구현한 내용</h2>\n<p>1자리의 숫자를 받는 인풋(InputBox 컴포넌트) 6개로 구성된 PinInput 컴포넌트가 있다.\nPinInput 컴포넌트를 감싼 상위 컴포넌트인 InputPopup 컴포넌트에 6자리의 핀번호를 전달하는 것이 목적이었다.</p><p><img src=\"https://github.com/makepin2r/blog/blob/master/src/assets/post-images/210705-diagram.png?raw=true\" alt=\"diagram\"></p>\n<ol>\n<li>InputBox에서 v-model로 받는 입력값 inputValue를, v-on:input=\"handleInput\" 함수에서 emit으로 상위 컴포넌트에 전송한다. 해당 컴포넌트의 id와 inputValue가 전송된다.</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">// InputBox.vue\n&lt;input :id=&quot;id&quot; :type=&quot;type&quot; :maxlength=&quot;length&quot; v-model=&quot;inputValue&quot; :name=&quot;name&quot; @input=&quot;handleInput&quot; /&gt;\n\n@Emit(&#39;onChangeValue&#39;)\nhandleInput(e : {target: HTMLInputElement}){\n    if(!(Number.isInteger(Number(this.inputValue)))){\n    // 숫자가 아닐 때\n    alert(&#39;숫자를 입력해주세요.&#39;);\n    this.inputValue = &quot;&quot;;\n    } else if(e.target.nextElementSibling &amp;&amp; this.id &lt; 6){\n    (e.target.nextElementSibling as HTMLElement).focus();\n    }\n    return {\n    id: this.id,\n    value: this.inputValue\n    };\n}</code></pre>\n<ol start=\"2\">\n<li>PinInput에서 배열을 하나 생성하고(values), 연결된 changeValue() 함수에서 전달된 값을 values에 넣는다.  </li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">// PinInput.vue\n\n&lt;InputBox \n    v-for=&quot;(item, index) in 6&quot; \n    :key=&quot;index&quot; \n    :id=&quot;index&quot; \n    type=&quot;password&quot; \n    :length=&quot;1&quot; \n    name=&quot;input&quot;\n    @onChangeValue=&quot;changeValue&quot;\n    ref=&quot;inputRef&quot;&gt; \n&lt;/InputBox&gt;\n\n\nexport default class PinInput extends Vue {\n\n@PropSync(&#39;pinValue&#39;, {type: String}) joinedValue !: string\nprivate values: Array&lt;String&gt; = [&#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;]\n\nprivate changeValue (obj: any) {\n    this.values[obj.id] = obj.value;\n    this.joinedValue = this.values.join(&#39;&#39;); // InputPopup에 업데이트됨\n}\n    //.....</code></pre>\n<ol start=\"3\">\n<li>joinedValue는 상위 컴포넌트인 PinInputPopup에 sync된 변수이다. joinedValue가 변경될 때마다  PinInputPopup에 변경된 값이 업데이트된다.</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">// PinInputPopup.vue\n&lt;PinInput :pinValue.sync=&quot;pinValue&quot; ref=&quot;PinInput&quot;&gt;&lt;/PinInput&gt;</code></pre>\n<h2>배운 것</h2>\n<h3>Emit</h3>\n<h4>Emit의 개념과 기본 작성 방법</h4>\n<p>vue에서는 이벤트를 이용해 하위 컴포넌트에서 상위 컴포넌트로 통신한다. 하위 컴포넌트를 <code>emit</code>하여 상위 컴포넌트에 연결할 수 있다.<br>\n1. 하위 컴포넌트에서는 이벤트를 호출할 때 <code>$emit</code> 을 이용한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">this.$emit(&#39;하위이벤트명&#39;);</code></pre>\n<ol start=\"2\">\n<li>\n<p>상위 컴포넌트는 <code>v-on</code>을 이용해 이벤트를 수신한다. 하위이벤트에서 리턴값이 존재하는 경우 이 리턴값은 상위이벤트의 인자로 들어간다. (하위이벤트의 리턴값과 상위이벤트의 인자 구조를 동일하게 맞춰주어야 한다!)</p></li></ol> ..."}},{"node":{"id":"69db3d2af5f559176f34ddd8968f854c","title":"vue-disqus를 이용해 Gridsome 블로그에 댓글 시스템을 달아보자","date":"2. July 2021","timeToRead":2,"path":"/post/210702-vue-disqus/","category":{"id":"blog","title":"blog","path":"/category/blog/"},"tags":[{"id":"gridsome","title":"gridsome","path":"/tag/gridsome/"},{"id":"vue-disqus","title":"vue-disqus","path":"/tag/vue-disqus/"}],"excerpt":"<p>조금씩 블로그 세팅을 덧붙여가고 있다.<br>\n이번에는 <a href=\"https://github.com/ktquez/vue-disqus\">VueDisqus</a>를 이용해 블로그에 댓글을 달아보았다.</p>\n<h2>vue-disqus</h2>\n<p>Gridsome 공식 문서에 보면, vue-disqus를 이용해 댓글 시스템을 다는 방법에 대한 설명이 잘 나와있다.<br>\n<a href=\"https://gridsome.org/docs/guide-comments/\">https://gridsome.org/docs/guide-comments/</a>  ← 참고한 Gridsome 문서이다. 보며 설치할 것을 추천.</p><p>사실 vue-disqus 넣는 것도 방식이 어렵지 않고 아주 깔끔하다!</p>\n<h2>설치하기</h2>\n<h3>1. Disqus 가입하기.</h3>\n<p>먼저 <strong>Disqus</strong>에 가입해야 한다.<br>\n<a href=\"https://disqus.com/\">https://disqus.com/</a> 에 들어간 뒤, 가입하면 된다. 가입 후    ...</p>"}},{"node":{"id":"7d2e6a6ab7fbd5a9b38191bfa199a6a1","title":"Gridsome과 Github Pages를 이용해 블로그 만들기","date":"2. July 2021","timeToRead":4,"path":"/post/210702-first-post/","category":{"id":"blog","title":"blog","path":"/category/blog/"},"tags":[{"id":"gridsome","title":"gridsome","path":"/tag/gridsome/"},{"id":"gh-pages","title":"gh-pages","path":"/tag/gh-pages/"}],"excerpt":"<p>Gridsome을 이용해서 블로그를 개설해보았다.</p>\n<h2>Gridsome 알아보기</h2>\n<p><a href=\"https://gridsome.org/\">Gridsome 홈페이지 바로가기</a></p><p>Gridsome은 간단히 말하자면 Vue.js로 만들어진 정적 사이트 생성기이다.<br>\n마치 Gatsby가 React를 이용해 만들어진 것처럼, Vue에는 Gridsome이 있다. (Gridsome 자체가 Gatsby에서 많은 영향을 받았다고 한다.)</p>\n<h3>Gridsome을 알게 된 &#x26; 사용하게 된 이유</h3>\n<p>이번에 프론트엔드 개발을 시작하면서 배우는 것들이 너무 많아 기술 블로그를 쓰기로 했다.<br>\n깃허브 블로그를 쓰고 싶어 Jekyll로 세팅하려 했는데 팀장님이 Vue로 된 정적 사이트 생성기가 있다고 소개해주셨다.\n아직 만들어진지 오래 되진 않았지만 (2018년인가..로 알고 있다) 문서도 훌륭하고 초기 세팅을 돕는 Starter도 너무 잘 되어있었다.\n덕분에 쾌적하게 블로그를 만들었다 😊 ...</p>"}}]}},"context":{}}