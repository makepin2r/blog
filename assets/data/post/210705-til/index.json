{"hash":"1ec312940c49be70375c29e1c6d700e9b7a536fa","data":{"post":{"title":"TIL✨ PIN번호 입력 폼 만들기","path":"/post/210705-til/","date":"5. July 2021","timeToRead":7,"category":{"id":"TIL","title":"TIL","path":"/category/til/"},"tags":[{"id":"TIL","title":"TIL","path":"/tag/TIL/","belongsTo":{"edges":[{"node":{"id":"1420bdac118b62f8150762f818ef131b","title":"TIL✨ PIN번호 입력 폼 만들기","path":"/post/210705-til/"}}]}},{"id":"Vue","title":"Vue","path":"/tag/Vue/","belongsTo":{"edges":[{"node":{"id":"1420bdac118b62f8150762f818ef131b","title":"TIL✨ PIN번호 입력 폼 만들기","path":"/post/210705-til/"}}]}}],"content":"<h2 id=\"구현한-내용\"><a href=\"#%EA%B5%AC%ED%98%84%ED%95%9C-%EB%82%B4%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>구현한 내용</h2>\n<p>1자리의 숫자를 받는 인풋(InputBox 컴포넌트) 6개로 구성된 PinInput 컴포넌트가 있다.\nPinInput 컴포넌트를 감싼 상위 컴포넌트인 InputPopup 컴포넌트에 6자리의 핀번호를 전달하는 것이 목적이었다.</p>\n<p><img src=\"https://github.com/makepin2r/blog/blob/master/src/assets/post-images/210705-diagram.png?raw=true\" alt=\"diagram\"></p>\n<ol>\n<li>InputBox에서 v-model로 받는 입력값 inputValue를, v-on:input=\"handleInput\" 함수에서 emit으로 상위 컴포넌트에 전송한다. 해당 컴포넌트의 id와 inputValue가 전송된다.</li>\n</ol>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">// InputBox.vue\n&lt;input :id=&quot;id&quot; :type=&quot;type&quot; :maxlength=&quot;length&quot; v-model=&quot;inputValue&quot; :name=&quot;name&quot; @input=&quot;handleInput&quot; /&gt;\n\n@Emit(&#39;onChangeValue&#39;)\nhandleInput(e : {target: HTMLInputElement}){\n    if(!(Number.isInteger(Number(this.inputValue)))){\n    // 숫자가 아닐 때\n    alert(&#39;숫자를 입력해주세요.&#39;);\n    this.inputValue = &quot;&quot;;\n    } else if(e.target.nextElementSibling &amp;&amp; this.id &lt; 6){\n    (e.target.nextElementSibling as HTMLElement).focus();\n    }\n    return {\n    id: this.id,\n    value: this.inputValue\n    };\n}<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>PinInput에서 배열을 하나 생성하고(values), 연결된 changeValue() 함수에서 전달된 값을 values에 넣는다.  </li>\n</ol>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">// PinInput.vue\n\n&lt;InputBox \n    v-for=&quot;(item, index) in 6&quot; \n    :key=&quot;index&quot; \n    :id=&quot;index&quot; \n    type=&quot;password&quot; \n    :length=&quot;1&quot; \n    name=&quot;input&quot;\n    @onChangeValue=&quot;changeValue&quot;\n    ref=&quot;inputRef&quot;&gt; \n&lt;/InputBox&gt;\n\n\nexport default class PinInput extends Vue {\n\n@PropSync(&#39;pinValue&#39;, {type: String}) joinedValue !: string\nprivate values: Array&lt;String&gt; = [&#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;]\n\nprivate changeValue (obj: any) {\n    this.values[obj.id] = obj.value;\n    this.joinedValue = this.values.join(&#39;&#39;); // InputPopup에 업데이트됨\n}\n    //.....<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>joinedValue는 상위 컴포넌트인 PinInputPopup에 sync된 변수이다. joinedValue가 변경될 때마다  PinInputPopup에 변경된 값이 업데이트된다.</li>\n</ol>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">// PinInputPopup.vue\n&lt;PinInput :pinValue.sync=&quot;pinValue&quot; ref=&quot;PinInput&quot;&gt;&lt;/PinInput&gt;<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<h2 id=\"배운-것\"><a href=\"#%EB%B0%B0%EC%9A%B4-%EA%B2%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>배운 것</h2>\n<h3 id=\"emit\"><a href=\"#emit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Emit</h3>\n<h4 id=\"emit의-개념과-기본-작성-방법\"><a href=\"#emit%EC%9D%98-%EA%B0%9C%EB%85%90%EA%B3%BC-%EA%B8%B0%EB%B3%B8-%EC%9E%91%EC%84%B1-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Emit의 개념과 기본 작성 방법</h4>\n<p>vue에서는 이벤트를 이용해 하위 컴포넌트에서 상위 컴포넌트로 통신한다. 하위 컴포넌트를 <code>emit</code>하여 상위 컴포넌트에 연결할 수 있다.<br>\n1. 하위 컴포넌트에서는 이벤트를 호출할 때 <code>$emit</code> 을 이용한다.</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">this.$emit(&#39;하위이벤트명&#39;);<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<ol start=\"2\">\n<li>\n<p>상위 컴포넌트는 <code>v-on</code>을 이용해 이벤트를 수신한다. 하위이벤트에서 리턴값이 존재하는 경우 이 리턴값은 상위이벤트의 인자로 들어간다. (하위이벤트의 리턴값과 상위이벤트의 인자 구조를 동일하게 맞춰주어야 한다!)</p>\n<template>\n    <ChildComponent v-on:하위이벤트명=\"상위이벤트\">\n</template>\n<p>상위이벤트: function(){\n// ...\n}</p>\n</li>\n</ol>\n<h4 id=\"vue-decorator를-이용한-emit-작성-방법-emit\"><a href=\"#vue-decorator%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-emit-%EC%9E%91%EC%84%B1-%EB%B0%A9%EB%B2%95-emit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>vue-decorator를 이용한 Emit 작성 방법 (@Emit)</h4>\n<p>현재 프로젝트에서 vue-decorator를 사용하기 때문에, vue-decorator에서 emit을 어떻게 사용하는지 구문 사용법도 알게 되었다. <code>@Emit</code>을 이용한다. 하위 컴포넌트의 코드가 아래와 같이 변경된다.</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">// this.$emit(&#39;하위이벤트명&#39;); 대신\n@Emit(&#39;상위이벤트&#39;)\n하위이벤트 : function(){\n    // ...\n}<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"sync\"><a href=\"#sync\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sync</h3>\n<p>sync를 새롭게 학습하고 적용해보았다.   </p>\n<h4 id=\"sync의-개념과-기본-작성-방법\"><a href=\"#sync%EC%9D%98-%EA%B0%9C%EB%85%90%EA%B3%BC-%EA%B8%B0%EB%B3%B8-%EC%9E%91%EC%84%B1-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sync의 개념과 기본 작성 방법</h4>\n<p>간단히 말하면 <code>.sync</code>는 자식 컴포넌트가 부모 컴포넌트의 값을 변경할 수 있도록 하는 기능이다. 양방향 데이터 바인딩을 하되, 자식 요소에서 데이터 변동이 일어나고 부모 요소는 특정 이벤트를 감지하여 바인딩된 데이터를 업데이트할 수 있도록 해주는 장치이다. 그러므로, 데이터 변동이 일어나는 지점을 명확히 알 수 있는 장점이 있다.  </p>\n<p>사용 방법은 아래와 같다.  </p>\n<ol>\n<li>\n<p>부모 컴포넌트의 템플릿에서는 자식 컴포넌트가 어떤 값을 제어할 수 있는지 적는다.(아래 예시 코드는 자식 컴포넌트의 prop인 childValue가 부모 컴포넌트의 value에 sync된다는 뜻이다.)</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">&lt;ChildComponent :childValue.sync=&quot;value&quot;&gt;<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n</li>\n<li>\n<p>자식 컴포넌트에서는 childValue를 prop으로 정의하고, childValue가 변경될 때 아래와 같이 코드를 작성한다.</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">this.$emit(&#39;update:childValue&#39;, &quot;바뀔 값&quot;);<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n</li>\n</ol>\n<p>위 코드가 실행되는 순간 부모 컴포넌트에 전달되어 value의 값이 변경된다.</p>\n<h4 id=\"vue-decorator를-이용한-sync-작성-방법-propsync\"><a href=\"#vue-decorator%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-sync-%EC%9E%91%EC%84%B1-%EB%B0%A9%EB%B2%95-propsync\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>vue-decorator를 이용한 Sync 작성 방법 (@PropSync)</h4>\n<p>vue-decorator을 쓰면 자식 컴포넌트의 코드가 훨씬 간결해진다.</p>\n<p>먼저, Prop으로 정의하는 대신 아래와 같이 정의한다.</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">@PropSync({type: String}) childValue : string;<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p>그러면 해당 값을 업데이트할 때 추가적인 표현은 필요하지 않다. 그냥 일반 변수에 값을 할당하듯 작성하면 된다.</p>\n<pre class=\"language-text line-numbers\"><code class=\"language-text\">// this.$emit(&#39;update:childValue&#39;, &quot;바뀔 값&quot;); 대신\nthis.childValue = &quot;바뀔 값&quot;;<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span></span></code></pre>\n<h2 id=\"느낀-점\"><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>느낀 점</h2>\n<ul>\n<li>하위 컴포넌트에서 상위 컴포넌트로 값을 전달하는 다양한 방식들이 헷갈렸는데, 이번 기회에 이해가 좀더 단단해져 기쁘다!</li>\n<li>프로젝트에 내가 기존에 접해보지 못했거나 익숙하지 않은 기술들이 많다. (typescript, storybook, 다양한 vue 관련 라이브러리...) 처음에는 내가 모르는 부분이 정확히 어디에서 학습해야 하는 건지 아는 데만도 어려웠다. 하지만 차근히 공부하다보니 이제는 조금씩 프로젝트 구조가 눈에 들어오기 시작한다. 덤으로 검색 실력이 급상승중이다(!). </li>\n<li>처음으로 컴포넌트 기반 프로그래밍을 해봐서 서툰 점도 많고 머리가 엄청나게 아팠다. 첫 일주일은 회사에서 끙끙 앓기만 한 것 같다. 그러다가 문득 이런 생각이 들었다. '내가 지금 겁나 힘들다면 잘하고 있는 거다! 깡통이 아니라 꽉꽉 채워서 공부해서 그런 거니까. 그러니 묵묵히 하다보면 평소랑은 비교할 수 없을 만큼 성장하겠구나!'<br>\n이런 생각을 한 뒤로 어느 정도는 고통스러운 게 참을만 해졌다. 끝없는 자기비하를 어떻게든 멈춰보려다 든 생각이긴 하지만, 멘탈케어에 나쁘지 않은 마인드같다.</li>\n</ul>\n<h4 id=\"참고-사이트\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>참고 사이트</h4>\n<h5 id=\"emit-관련\"><a href=\"#emit-%EA%B4%80%EB%A0%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Emit 관련</h5>\n<ul>\n<li>vue의 이벤트 발생 : <a href=\"https://joshua1988.github.io/vue-camp/vue/event-emit.html#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B0%9C%EC%83%9D-%EC%BD%94%EB%93%9C-%ED%98%95%EC%8B%9D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://joshua1988.github.io/vue-camp/vue/event-emit.html#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B0%9C%EC%83%9D-%EC%BD%94%EB%93%9C-%ED%98%95%EC%8B%9D</a>\n##### Sync 관련</li>\n<li>.sync 수식어 : <a href=\"https://kr.vuejs.org/v2/guide/components-custom-events.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kr.vuejs.org/v2/guide/components-custom-events.html</a>](<a href=\"https://kr.vuejs.org/v2/guide/components-custom-events.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kr.vuejs.org/v2/guide/components-custom-events.html</a></li>\n<li>vue-decorator의 @PropSync 구문 사용법 공식 문서 : <a href=\"https://github.com/kaorun343/vue-property-decorator#PropSync\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/kaorun343/vue-property-decorator#PropSync</a></li>\n<li>vue-decorator의 @PropSync 구문 사용법 한국어 : <a href=\"http://ccambo.github.io/Dev/Vue/6.How-to-use-vue-property-decorator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://ccambo.github.io/Dev/Vue/6.How-to-use-vue-property-decorator/</a></li>\n</ul>\n"},"metadata":{"siteUrl":"https://my-name.github.io","utterances":{"repo":"phoenix741/comments.myblog","issueTerm":"title","label":"discussion"}}},"context":{}}